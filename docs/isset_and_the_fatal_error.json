{
    "image": "isset_and_the_fatal_error.png",
    "date": "2025-09-15",
    "title": "isset() And The Fatal Error",
    "content": "isset() checks if a variable exists. By extension, it also checks array elements, object properties etc. As the check is performed, any attempt to access an undefined part of the expression is muted: this makes total sense. \nFor example, if one of the intermediate expression is an integer, it is not possible to access it with an array syntax, unlike an array or a string. Such access is a warning when used outside isset(), but is silent inside the isset(). \nThis leads to a nice optimisation, where checking ``isset($a[1][2][3][4])`` is sufficient to check ``isset($a)``, then ``isset($a[1])``, ``isset($a[1][2])``, ``isset($a[1][2][3])``, and ``isset($a[1][2][3][4])``. Nice. \nThe catch is when of the element inside the actual array is an object. PHP reports a fatal error when using an object with an array syntax (except may be for ArrayAccess objects). Then, isset() stops. \nThe reverse is not true: accessing an array with a object syntax yields a null and no warning. As it should be.\nAll this also applies to empty().\nA change of behavior was suggested for PHP 8.5, but was down voted. May be in PHP 8.6?",
    "seeAlso": {
        "empty (PHP manual)": "https:\/\/www.php.net\/manual\/en\/function.empty.php",
        "isset (PHP manual)": "https:\/\/www.php.net\/manual\/en\/function.isset.php",
        "PHP RFC: Warnings for PHP 8.5": "https://wiki.php.net/rfc/warnings-php-8-5"
    },
    "tags": [
        "bug"
    ],
    "author": "",
    "contact": "",
    "features": ["isset", "empty", "object-syntax", "array-syntax"],
    "3v4l": {"Don't use array syntax on objects in isset()":"https://3v4l.org/81sh5"},
    "phpError": {"Cannot use object of type stdClass as array":"cannot-use-object-of-type-%s-as-array"}
}